{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\project-2-app\\\\src\\\\components\\\\News.js\";\n// import React, { Component } from 'react'\n// import Newsitem from './Newsitem'\n\n// export class News extends Component {\n//   articles =  [{\n//     \"source\": {\n//     \"id\": null,\n//     \"name\": \"MMA Mania\"\n//     },\n//     \"author\": \"Andrew Richardson\",\n//     \"title\": \"Midnight Mania: Kennedy Filmed With Exploding Cybertruck Driver - ‘A Great Green Beret’\",\n//     \"description\": \"Bringing you the weird and wild from the world of MMA each and every weeknight!\",\n//     \"url\": \"https://www.mmamania.com/2025/1/4/24335487/ex-ufc-fighter-tim-kennedy-filmed-las-vegas-cybertruck-blast-suspect-matthew-livelsberger-espn\",\n//     \"urlToImage\": \"https://cdn.vox-cdn.com/thumbor/JRzkKZBswlbWs9UVUB6Wm9xur_U=/0x104:4741x2586/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/25816149/628983176.jpg\",\n//     \"publishedAt\": \"2025-01-04T05:00:00Z\",\n//     \"content\": \"Bringing you the weird and wild from the world of MMA each and every weeknight! Welcome to Midnight Mania!\\nOn Wednesday (Jan. 1, 2025), a Tesla Cybertruck exploded just outside of the main entrance o… [+5583 chars]\"\n//     },\n\n//    ];\n\n//   //  APIKEY=343131cc439f49a5bf89843e5e45a47a\n\n//   constructor() {\n//       super();\n//       this.state = {\n//           articles: this.articles,\n//           loading: false  // ✅ Initialize state to prevent \"null\" error\n//       }\n//   }\n//   async componentDidMount() {\n//     let url = `https://newsapi.org/v2/top-headlines?sources=the-times-of-india,ndtv&apiKey=343131cc439f49a5bf89843e5e45a47a`;\n\n//     try {\n//         let data = await fetch(url);\n//         let parsedData = await data.json();\n//         console.log(parsedData);\n//         this.setState({ articles: parsedData.articles });  // ✅ Correct way\n//     } catch (error) {\n//         console.error(\"Failed to fetch news:\", error);\n//     }\n// }\n\n// render() {\n//       return (\n//           <div className='container my-3'>\n//               <h2 className='text-center'><b>Aaj Tak-Top Headlines-News</b></h2>\n//               <div className=\"row\">\n//                   {this.state.articles.map((element) => {\n//                       return (\n//                           <div className='col-md-4 my-5' key={element.url}>\n//                               <Newsitem \n//                                   title={element.title} \n//                                   Description={element.description} \n//                                   imageUrl={element.urlToImage}\n//                                   newsUrl={element.url} \n//                               />\n//                           </div>\n//                       );\n//                   })}\n//               </div>\n\n//           </div>\n//       );\n//   }\n// }\n// export default News\n\nimport React, { Component } from 'react';\nimport { parseString } from 'xml2js';\nimport Newsitem from './Newsitem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class News extends Component {\n  constructor() {\n    super();\n    this.state = {\n      articles: []\n    };\n  }\n  async componentDidMount() {\n    const rssUrl = 'https://feeds.feedburner.com/ndtvnews-top-stories';\n    const rssText = await fetchRSSFeed(rssUrl);\n    const parsedData = await parseRSSFeed(rssText);\n    const items = parsedData.rss.channel[0].item;\n    const articles = items.map(item => ({\n      title: item.title[0],\n      description: item.description[0],\n      url: item.link[0],\n      urlToImage: item['media:thumbnail'] ? item['media:thumbnail'][0].$.url : 'https://via.placeholder.com/150'\n    }));\n    this.setState({\n      articles\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Aaj Tak - Top Headlines (via RSS)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: this.state.articles.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4 my-5\",\n          children: /*#__PURE__*/_jsxDEV(Newsitem, {\n            title: element.title,\n            Description: element.description,\n            imageUrl: element.urlToImage,\n            newsUrl: element.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n}\nasync function fetchRSSFeed(url) {\n  const response = await fetch(url);\n  const text = await response.text();\n  return text;\n}\nasync function parseRSSFeed(rssText) {\n  return new Promise((resolve, reject) => {\n    parseString(rssText, (err, result) => {\n      if (err) reject(err);\n      resolve(result);\n    });\n  });\n}\nexport default News;","map":{"version":3,"names":["React","Component","parseString","Newsitem","jsxDEV","_jsxDEV","News","constructor","state","articles","componentDidMount","rssUrl","rssText","fetchRSSFeed","parsedData","parseRSSFeed","items","rss","channel","item","map","title","description","url","link","urlToImage","$","setState","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","element","index","Description","imageUrl","newsUrl","response","fetch","text","Promise","resolve","reject","err","result"],"sources":["C:/REACT/project-2-app/src/components/News.js"],"sourcesContent":["// import React, { Component } from 'react'\r\n// import Newsitem from './Newsitem'\r\n\r\n\r\n\r\n// export class News extends Component {\r\n//   articles =  [{\r\n//     \"source\": {\r\n//     \"id\": null,\r\n//     \"name\": \"MMA Mania\"\r\n//     },\r\n//     \"author\": \"Andrew Richardson\",\r\n//     \"title\": \"Midnight Mania: Kennedy Filmed With Exploding Cybertruck Driver - ‘A Great Green Beret’\",\r\n//     \"description\": \"Bringing you the weird and wild from the world of MMA each and every weeknight!\",\r\n//     \"url\": \"https://www.mmamania.com/2025/1/4/24335487/ex-ufc-fighter-tim-kennedy-filmed-las-vegas-cybertruck-blast-suspect-matthew-livelsberger-espn\",\r\n//     \"urlToImage\": \"https://cdn.vox-cdn.com/thumbor/JRzkKZBswlbWs9UVUB6Wm9xur_U=/0x104:4741x2586/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/25816149/628983176.jpg\",\r\n//     \"publishedAt\": \"2025-01-04T05:00:00Z\",\r\n//     \"content\": \"Bringing you the weird and wild from the world of MMA each and every weeknight! Welcome to Midnight Mania!\\nOn Wednesday (Jan. 1, 2025), a Tesla Cybertruck exploded just outside of the main entrance o… [+5583 chars]\"\r\n//     },\r\n\r\n//    ];\r\n    \r\n//   //  APIKEY=343131cc439f49a5bf89843e5e45a47a\r\n\r\n//   constructor() {\r\n//       super();\r\n//       this.state = {\r\n//           articles: this.articles,\r\n//           loading: false  // ✅ Initialize state to prevent \"null\" error\r\n//       }\r\n//   }\r\n//   async componentDidMount() {\r\n//     let url = `https://newsapi.org/v2/top-headlines?sources=the-times-of-india,ndtv&apiKey=343131cc439f49a5bf89843e5e45a47a`;\r\n\r\n//     try {\r\n//         let data = await fetch(url);\r\n//         let parsedData = await data.json();\r\n//         console.log(parsedData);\r\n//         this.setState({ articles: parsedData.articles });  // ✅ Correct way\r\n//     } catch (error) {\r\n//         console.error(\"Failed to fetch news:\", error);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// render() {\r\n//       return (\r\n//           <div className='container my-3'>\r\n//               <h2 className='text-center'><b>Aaj Tak-Top Headlines-News</b></h2>\r\n//               <div className=\"row\">\r\n//                   {this.state.articles.map((element) => {\r\n//                       return (\r\n//                           <div className='col-md-4 my-5' key={element.url}>\r\n//                               <Newsitem \r\n//                                   title={element.title} \r\n//                                   Description={element.description} \r\n//                                   imageUrl={element.urlToImage}\r\n//                                   newsUrl={element.url} \r\n//                               />\r\n//                           </div>\r\n//                       );\r\n//                   })}\r\n//               </div>\r\n       \r\n\r\n//           </div>\r\n//       );\r\n//   }\r\n// }\r\n// export default News\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { parseString } from 'xml2js';\r\nimport Newsitem from './Newsitem';\r\n\r\nexport class News extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            articles: []\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const rssUrl = 'https://feeds.feedburner.com/ndtvnews-top-stories';\r\n        const rssText = await fetchRSSFeed(rssUrl);\r\n        const parsedData = await parseRSSFeed(rssText);\r\n\r\n        const items = parsedData.rss.channel[0].item;\r\n\r\n        const articles = items.map(item => ({\r\n            title: item.title[0],\r\n            description: item.description[0],\r\n            url: item.link[0],\r\n            urlToImage: item['media:thumbnail'] ? item['media:thumbnail'][0].$.url : 'https://via.placeholder.com/150'\r\n        }));\r\n\r\n        this.setState({ articles });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container my-3'>\r\n                <h2 className='text-center'><b>Aaj Tak - Top Headlines (via RSS)</b></h2>\r\n                <div className=\"row\">\r\n                    {this.state.articles.map((element, index) => (\r\n                        <div className='col-md-4 my-5' key={index}>\r\n                            <Newsitem\r\n                                title={element.title}\r\n                                Description={element.description}\r\n                                imageUrl={element.urlToImage}\r\n                                newsUrl={element.url}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nasync function fetchRSSFeed(url) {\r\n    const response = await fetch(url);\r\n    const text = await response.text();\r\n    return text;\r\n}\r\n\r\nasync function parseRSSFeed(rssText) {\r\n    return new Promise((resolve, reject) => {\r\n        parseString(rssText, (err, result) => {\r\n            if (err) reject(err);\r\n            resolve(result);\r\n        });\r\n    });\r\n}\r\n\r\nexport default News;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}